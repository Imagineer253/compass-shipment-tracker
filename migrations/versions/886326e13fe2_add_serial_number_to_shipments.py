"""add_serial_number_to_shipments

Revision ID: 886326e13fe2
Revises: 2c9791241c6b
Create Date: 2025-06-20 11:23:59.911290

"""
from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision = '886326e13fe2'
down_revision = '2c9791241c6b'
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('shipment_serial_counter',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('counter', sa.Integer(), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.drop_table('invoice_counter')
    
    # Add serial_number column as nullable first
    with op.batch_alter_table('shipment', schema=None) as batch_op:
        batch_op.add_column(sa.Column('serial_number', sa.String(length=10), nullable=True))
        batch_op.drop_column('requester_title')
        batch_op.drop_column('requester_given_name')
        batch_op.drop_column('requester_last_name')
    
    # Populate existing shipments with serial numbers
    connection = op.get_bind()
    
    # Initialize the counter
    connection.execute(
        sa.text("INSERT INTO shipment_serial_counter (counter) VALUES (0)")
    )
    
    # Get all existing shipments
    result = connection.execute(sa.text("SELECT id FROM shipment ORDER BY created_at ASC"))
    shipments = result.fetchall()
    
    # Assign serial numbers to existing shipments
    for i, shipment in enumerate(shipments, 1):
        serial_number = f"{i:04d}"
        connection.execute(
            sa.text("UPDATE shipment SET serial_number = :serial WHERE id = :id"),
            {"serial": serial_number, "id": shipment[0]}
        )
    
    # Update the counter to reflect the number of existing shipments
    if shipments:
        connection.execute(
            sa.text("UPDATE shipment_serial_counter SET counter = :count"),
            {"count": len(shipments)}
        )
    
    # Now make serial_number non-nullable
    with op.batch_alter_table('shipment', schema=None) as batch_op:
        batch_op.alter_column('serial_number', nullable=False)

    with op.batch_alter_table('user', schema=None) as batch_op:
        batch_op.alter_column('first_name',
               existing_type=sa.VARCHAR(length=50),
               nullable=False)
        batch_op.drop_constraint(batch_op.f('uq_user_pi_id'), type_='unique')
        batch_op.drop_column('pi_id')
        batch_op.drop_column('title')
        batch_op.drop_column('given_name')

    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('user', schema=None) as batch_op:
        batch_op.add_column(sa.Column('given_name', sa.VARCHAR(length=50), nullable=False))
        batch_op.add_column(sa.Column('title', sa.VARCHAR(length=20), nullable=False))
        batch_op.add_column(sa.Column('pi_id', sa.VARCHAR(length=10), nullable=False))
        batch_op.create_unique_constraint(batch_op.f('uq_user_pi_id'), ['pi_id'])
        batch_op.alter_column('first_name',
               existing_type=sa.VARCHAR(length=50),
               nullable=True)

    with op.batch_alter_table('shipment', schema=None) as batch_op:
        batch_op.add_column(sa.Column('requester_last_name', sa.VARCHAR(length=50), nullable=True))
        batch_op.add_column(sa.Column('requester_given_name', sa.VARCHAR(length=50), nullable=True))
        batch_op.add_column(sa.Column('requester_title', sa.VARCHAR(length=20), nullable=True))
        batch_op.drop_column('serial_number')

    op.create_table('invoice_counter',
    sa.Column('id', sa.INTEGER(), nullable=False),
    sa.Column('shipment_type', sa.VARCHAR(length=20), nullable=False),
    sa.Column('year', sa.VARCHAR(length=4), nullable=False),
    sa.Column('month', sa.VARCHAR(length=3), nullable=False),
    sa.Column('counter', sa.INTEGER(), nullable=False),
    sa.Column('created_at', sa.DATETIME(), nullable=True),
    sa.Column('updated_at', sa.DATETIME(), nullable=True),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('shipment_type', 'year', 'month', name=op.f('unique_counter_per_period'))
    )
    op.drop_table('shipment_serial_counter')
    # ### end Alembic commands ###
